# vim: ft=gitconfig

[alias]
  # Shell commands will be executed from the top-level directory of a repository
  exec = "!exec "
  a = add
  aa = add --all
  au = add --update
  ap = add --patch
  alia = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#"
  go = log --all --graph --oneline
  gg = log --all --graph --pretty='%C(auto)%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --color
  ls = log --graph --pretty=format:\"%C(yellow)%h %C(blue)%ad %C(red)%d %C(reset)%s %C(green)[%cn]\" --date=short
  hist = log --pretty=format:\"%C(yellow)%h %C(red)%d %C(reset)%s %C(green)[%an] %C(blue)%ad\" --topo-order --graph --date=short
  dig = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f]\\+/\"&\"/g' ; echo '}'; }; f"
  latest = for-each-ref --sort=-committerdate --format=\"%(committerdate:short): @%(committername) \t\t\t\t %(refname:short) \n\t    %(contents)\" --color=auto
  s = status -sb
  ss = status
  c = commit -v
  ac = !git add --update && git c
  ca = c --amend
  can = c --amend --no-edit
  co = checkout
  cp = cherry-pick
  sw = switch
  b = branch
  br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
  sb = show-branch
  rs = restore --staged
  d = diff
  dd = diff --stat
  ds = diff --staged
  dt = difftool
  ; dh -> diff hash
  dh = "!d(){ git diff $1~ $1; }; d"
  ; dn -> diff number
  dn = "!d(){ git diff HEAD~$1 HEAD; }; d"
  count = rev-list --all --count
  ps = !which onefetch &>/dev/null && onefetch
  lf = ls-files
  lt = ls-tree --full-tree -r --name-only HEAD
  ; list ignored file/dir
  li = ls-files --others --ignored --exclude-standard
  lid = ls-files --others --ignored --exclude-standard --directory
  one = show -s --pretty='format:%h (%s)'
  save = !git add -A && git commit -m 'chore: commit save point'
  ignorefile = "!f(){ echo $1 >> .gitignore; }; f"
  ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
  ; To see what new commits have been created
  ; compare_new = "!f(){ git lg $1@{1}..$1@{0} \"$@\"; }; f"
  new = "!f(){ git $1 @{1}..@{0}; }; f"
  ; To temporarily mark a file as ignored
  unwatch = update-index --assume-unchanged
  ; To list all files that has been temporarily ignored - type:
  unwatched = "!git ls-files -v | grep '^[[:lower:]]'"
  ; To start tracking file again
  watch = update-index --no-assume-unchanged
  watchall = "!git unwatched | xargs -L 1 -I % sh -c 'git watch `echo % | cut -c 2-`'"
  lgp = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  lgg = log --graph --date-order --first-parent \
     --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'
  lgb = log --graph --date-order --branches --first-parent \
     --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'
  lga = log --graph --date-order --all \
   --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'
  # Get origin url
  # - git@github.foobar.com:user/repo.git
  # - https://github.foobar.com:user/repo
  #
  # sed commands:
  # 1. replace `:` between host and user
  # 2. remove `git@` in the beginning if present
  # 3. remove `.git` in the end if present
  # 4. remove `:` in the protocol if it was affected by step 1
  url = !git config remote.origin.url
  repourl = "!f() { git config remote.origin.url | sed 's/:/\\//' | sed -re 's/^git@/https:\\/\\//g' | sed 's/\\.git$//' | sed 's/^https\\//https:/'; }; f"
  pr = "!f() { open \"$(git repourl)/compare/$(git branch --show-current)\"; }; f"
  who = "!f() { git log -1 --pretty=\"format:%an <%ae>\" --author=\"$1\"; }; f"
  root = rev-parse --show-toplevel
