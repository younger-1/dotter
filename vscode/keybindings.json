// Place your key bindings in this file to override the defaults
[
    // Remap
    {
        "key": "shift+alt+c",
        "command": "copyFilePath"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    // Unmap basic
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+y",
        "command": "-redo"
    },
    // Unmap
    {
        "key": "ctrl+numpad_add",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "shift+f3",
        "command": "-hediet.vscode-drawio.linkCodeWithSelectedNode"
    },
    {
        "key": "ctrl+'",
        "command": "-luna.file.importFromClipboard"
    },
    {
        "key": "ctrl+up ctrl+up",
        "command": "-codetour.startTour",
        "when": "!terminalFocus && !textInputFocus"
    },
    // Basic
    {
        "key": "ctrl+;",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+,",
        "command": "workbench.action.openSettingsJson"
    },
    {
        "key": "ctrl+alt+,",
        "command": "workbench.action.openWorkspaceSettingsFile"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "shift+alt+.",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+alt+,",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+h",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+l",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+/",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "alt+=",
        "command": "workbench.action.nextPanelView"
    },
    {
        "key": "alt+-",
        "command": "workbench.action.previousPanelView"
    },
    {
        "key": "shift+alt+-",
        "command": "workbench.action.terminal.focusPrevious"
    },
    {
        "key": "shift+alt+=",
        "command": "workbench.action.terminal.focusNext"
    },
    {
        "key": "ctrl+numpad5",
        "command": "workbench.action.terminal.resizePaneUp"
    },
    {
        "key": "ctrl+numpad2",
        "command": "workbench.action.terminal.resizePaneDown"
    },
    // Ctrl+k
    {
        "key": "ctrl+k ctrl+shift+x",
        "command": "workbench.extensions.action.showInstalledExtensions"
    },
    {
        "key": "ctrl+k ctrl+shift+f",
        "command": "search.action.openEditor"
    },
    {
        "key": "ctrl+k ctrl+shift+b",
        "command": "workbench.action.tasks.test"
    },
    {
        "key": "ctrl+k shift+c",
        "command": "workbench.files.action.compareFileWith"
    },
    // Ctrl+k window
    {
        "key": "ctrl+k ctrl+m",
        "command": "workbench.action.toggleEditorWidths"
    },
    {
        "key": "ctrl+k =",
        "command": "workbench.action.evenEditorWidths"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "workbench.action.toggleEditorGroupLock"
    },
    {
        "key": "ctrl+k k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+k h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k l",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k shift+j",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k shift+h",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k shift+l",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k shift+k",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    // Ctrl+q
    {
        "key": "ctrl+q v",
        "command": "workbench.action.openView"
    },
    {
        "key": "ctrl+q e",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+q r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+q t",
        "command": "workbench.action.tasks.runTask"
    },
    // Ctrl+g view
    {
        "key": "ctrl+g ctrl+space",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+g ctrl+f",
        "command": "workbench.files.action.focusFilesExplorer"
    },
    {
        "key": "ctrl+g ctrl+g",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+g ctrl+o",
        "command": "outline.focus"
    },
    {
        "key": "ctrl+g ctrl+t",
        "command": "timeline.focus"
    },
    {
        "key": "ctrl+g ctrl+b",
        "command": "bookmarksExplorer.focus"
    },
    {
        "key": "ctrl+g alt+b",
        "command": "vscodeMarkdownNotesBacklinks.focus"
    },
    {
        "key": "ctrl+g ctrl+c",
        "command": "codetour.tours.focus"
    },
    // Gtrl+g git
    {
        "key": "ctrl+g space",
        "command": "gitlens.gitCommands",
        "when": "!gitlens:disabled"
    },
    {
        "key": "ctrl+g h",
        "command": "git.viewFileHistory"
    },
    {
        "key": "ctrl+g shift+h",
        "command": "git.viewHistory"
    },
    {
        "key": "ctrl+g ctrl+h",
        "command": "extension.git-file-history"
    },
    {
        "key": "ctrl+g shift+s",
        "command": "gitlens.showQuickStashList"
    },
    {
        "key": "ctrl+g b",
        "command": "gitlens.showQuickBranchHistory"
    },
    {
        "key": "ctrl+g f",
        "command": "gitlens.showCommitSearch"
    },
    {
        "key": "ctrl+g shift+b",
        "command": "gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "ctrl+g shift+c",
        "command": "gitlens.showQuickCommitDetails"
    },
    {
        "key": "ctrl+g m",
        "command": "gitlens.switchMode"
    },
    {
        "key": "ctrl+g w",
        "command": "gitlens.views.switchToAnotherBranch"
    },
    {
        "key": "ctrl+g shift+d",
        "command": "gitlens.diffHeadWith"
    },
    {
        "key": "ctrl+g r",
        "command": "gitlens.openFileRevision"
    },
    {
        "key": "ctrl+g shift+r",
        "command": "gitlens.openFileRevisionFrom"
    },
    {
        "key": "ctrl+g d",
        "command": "gitlens.diffWorkingWith"
    },
    {
        "key": "ctrl+g o",
        "command": "gitlens.openChangedFiles"
    },
    {
        "key": "ctrl+g shift+o",
        "command": "gitlens.closeUnchangedFiles"
    },
    {
        "key": "ctrl+g g",
        "command": "git-graph.view"
    },
    // Ctrl+m
    {
        "key": "ctrl+m ctrl+f",
        "command": "workbench.action.findInFiles"
    },
    // Ctrl+n
    {
        "key": "ctrl+n t",
        "command": "leetcode.testSolution"
    },
    {
        "key": "ctrl+n n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+n v",
        "command": "toggleVim"
    },
    {
        "key": "ctrl+n ctrl+v",
        "command": "open-in-vim.open"
    },
    {
        "key": "ctrl+n ctrl+o",
        "command": "extension.open"
    },
    {
        "key": "ctrl+n ctrl+m",
        "command": "editor.action.toggleTabFocusMode"
    },
    {
        "key": "ctrl+n p",
        "command": "livePreview.start",
        "when": "editorTextFocus"
    },
    // Code-runner
    {
        "key": "ctrl+n r",
        "command": "code-runner.run",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+n c",
        "command": "code-runner.runCustomCommand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-code-runner.runCustomCommand"
    },
    {
        "key": "ctrl+n shift+r",
        "command": "code-runner.runByLanguage",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-code-runner.runByLanguage"
    },
    // Vim
    {
        "key": "ctrl+h",
        "command": "extension.vim_ctrl+h",
        "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl && vim.mode != 'Normal' && vim.mode != 'Visual'"
    },
    {
        "key": "ctrl+h",
        "command": "-extension.vim_ctrl+h",
        "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
    },
    // {
    //     "key": "shift+;",
    //     "command": "vim.showQuickpickCmdLine",
    //     "when": "editorTextFocus && vim.mode != 'Insert'"
    // },
    // TODO:
    {
        "key": "alt+f9",
        "command": "editor.debug.action.addLogPoint"
    },
    // 越下面越优先执行，所以 `ctrl-j/k` 位于所有  `ctrl-j/k` 前缀的 combo-key 之后
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    // 方便在 vscode 悬浮部件中上下移动
    {
        "key": "ctrl+j",
        // "command": "workbench.action.quickOpenNavigateNext",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        // "command": "workbench.action.quickOpenNavigatePrevious",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // 在 list view 中的搜索结果之间移动
    {
        "key": "Ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus && !notebookEditorFocused && !searchViewletVisible"
    },
    {
        "key": "Ctrl+k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus && !notebookEditorFocused && !searchViewletVisible"
    },
    // 在 search input 之间移动
    {
        "key": "ctrl+j",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+k",
        "command": "search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    // List
    {
        "key": "l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
    },
    {
        "key": "l",
        "command": "-list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "t",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+h",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+j",
        "command": "list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "shift+k",
        "command": "list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    // for keybind editor
    // {
    //     "key": "j",
    //     "command": "list.focusDown",
    //     "when": "listFocus && !inputFocus && !inKeybindings"
    // },
    // {
    //     "key": "j",
    //     "command": "-list.focusDown",
    //     "when": "listFocus && !inputFocus"
    // },
    // for keybind editor
    // {
    //     "key": "k",
    //     "command": "list.focusUp",
    //     "when": "listFocus && !inputFocus && !inKeybindings"
    // },
    // {
    //     "key": "k",
    //     "command": "-list.focusUp",
    //     "when": "listFocus && !inputFocus"
    // },
    // Explorer
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+r",
        "command": "workbench.files.action.refreshFilesExplorer",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "d d",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "c",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "v",
        "command": "explorer.openToSide",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "shift+a",
        "command": "explorer.newFolder",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "m",
        "command": "fileutils.moveFile",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "n",
        "command": "fileutils.duplicateFile",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "y",
        "command": "copyFilePath",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "shift+y",
        "command": "copyRelativeFilePath",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    // Ctrl+space
    {
        "key": "ctrl+space",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorTextFocus"
    },
    {
        "key": "ctrl+space",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    // Setting editor
    {
        "key": "h",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    // keybind editor
    {
        "key": "ctrl+m k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings"
    },
    {
        "key": "ctrl+m y",
        "command": "keybindings.editor.copyCommandKeybindingEntry",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m shift+y",
        "command": "keybindings.editor.copyCommandTitle",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m f",
        "command": "keybindings.editor.searchKeybindings",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m r",
        "command": "keybindings.editor.resetKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m a",
        "command": "keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m w",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m s",
        "command": "keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m c",
        "command": "keybindings.editor.showConflicts",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m d",
        "command": "keybindings.editor.showDefaultKeybindings",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m e",
        "command": "keybindings.editor.showExtensionKeybindings",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+m u",
        "command": "keybindings.editor.showUserKeybindings",
        "when": "inKeybindings && keybindingFocus"
    },
    // Jupyter py
    {
        "key": "ctrl+l c",
        "command": "jupyter.changeCellToCode",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l m",
        "command": "jupyter.changeCellToMarkdown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l a",
        "command": "jupyter.insertCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l b",
        "command": "jupyter.insertCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l ctrl+l",
        "command": "jupyter.selectCell",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l l",
        "command": "jupyter.selectCellContents",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    // Jupyter notebook
    {
        "key": "m",
        "command": "notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
    },
    {
        "key": "y",
        "command": "notebook.cell.copy",
        "when": "notebookEditorFocused && !inputFocus"
    },
    // {
    //     "key": "d d",
    //     "command": "notebook.cell.delete",
    //     "when": "notebookEditorFocused && !inputFocus"
    // },
    // {
    //     "key": "x",
    //     "command": "notebook.cell.cut",
    //     "when": "notebookEditorFocused && !inputFocus"
    // },
    // {
    //     "key": "v",
    //     "command": "notebook.cell.paste",
    //     "when": "notebookEditorFocused && !inputFocus"
    // },
    {
        "key": "shift+v",
        "command": "notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "u",
        "command": "jupyter.notebookeditor.undocells",
        "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+u",
        "command": "jupyter.notebookeditor.redocells",
        "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    },
    // {
    //     "key": "b",
    //     "command": "jupyter.notebookeditor.addcellbelow",
    //     "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    // },
    // {
    //     "key": "l",
    //     "command": "notebook.cell.toggleLineNumbers",
    //     "when": "notebookCellListFocused && !inputFocus"
    // },
    // {
    //     "key": "shift+l",
    //     "command": "notebook.toggleLineNumbers",
    //     "when": "notebookCellListFocused && !inputFocus"
    // },
    // {
    //     "key": "o",
    //     "command": "notebook.cell.toggleOutputs",
    //     "when": "notebookCellListFocused && !inputFocus"
    // },
    {
        "key": "ctrl+l c",
        "command": "notebook.cell.collapseAllCellOutputs",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+l o",
        "command": "notebook.cell.expandAllCellOutputs",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "shift+o",
        "command": "notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "shift+o",
        "command": "notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "ctrl+l shift+o",
        "command": "notebook.cell.expandAllCellInputs",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+l shift+c",
        "command": "notebook.cell.collapseAllCellInputs",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+l s",
        "command": "notebook.cell.split",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+l j",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+l k",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    // Rust
    {
        "key": "ctrl+n r",
        "command": "rust-analyzer.run",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n shift+r",
        "command": "rust-analyzer.runSingle",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n f",
        "command": "rust-analyzer.showReferences",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n s",
        "command": "rust-analyzer.analyzerStatus",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n m",
        "command": "rust-analyzer.parentModule",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n y",
        "command": "rust-analyzer.copyRunCommandLine",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-rust-analyzer.matchingBrace",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n t",
        "command": "rust-analyzer.viewItemTree",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n shift+t",
        "command": "rust-analyzer.syntaxTree",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n c",
        "command": "rust-analyzer.openCargoToml",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n d",
        "command": "rust-analyzer.openDocs",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n g",
        "command": "rust-analyzer.viewCrateGraph",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n shift+g",
        "command": "rust-analyzer.viewFullCrateGraph",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    {
        "key": "ctrl+n h",
        "command": "rust-analyzer.toggleInlayHints",
        "when": "editorTextFocus && editorLangId == 'rust'"
    },
    // Java
    {
        "key": "ctrl+n r",
        "command": "java.debug.runJavaFile",
        "when": "editorTextFocus && editorLangId == 'java'"
    },
    {
        "key": "ctrl+n ctrl+o",
        "command": "javaProjectExplorer.focus",
        "when": "editorTextFocus && editorLangId == 'java'"
    },
    {
        "key": "ctrl+n h",
        "command": "java.overview",
        "when": "editorTextFocus && editorLangId == 'java'"
    },
    {
        "key": "ctrl+n shift+h",
        "command": "java.extGuide",
        "when": "editorTextFocus && editorLangId == 'java'"
    },
    {
        "key": "ctrl+n ctrl+h",
        "command": "java.welcome",
        "when": "editorTextFocus && editorLangId == 'java'"
    },
    // Latex
    {
        "key": "ctrl+l ctrl+m",
        "command": "-editor.action.toggleTabFocusMode",
        "when": "textInputFocus && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "ctrl+l alt+x",
        "command": "-workbench.view.extension.latex-workshop-activitybar",
        "when": "config.latex-workshop.bind.altKeymap.enabled"
    },
    {
        "key": "ctrl+l ctrl+c",
        "command": "latex-workshop-commands.focus",
        "when": "editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l ctrl+o",
        "command": "latex-workshop-structure.focus",
        "when": "editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l ctrl+s",
        "command": "latex-workshop-snippet-view.focus",
        "when": "editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l ctrl+l",
        "command": "latex-workshop.synctex",
        "when": "editorTextFocus && !virtualWorkspace && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+l v",
        "command": "latex-workshop.view",
        "when": "!virtualWorkspace && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "ctrl+l b",
        "command": "latex-workshop.recipes",
        "when": "!virtualWorkspace && editorLangId =~ /latex|rsweave|jlweave/"
    },
    {
        "key": "alt+d",
        "command": "-foam-vscode.open-daily-note"
    }
]